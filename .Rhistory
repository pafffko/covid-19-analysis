length(tb)
nrow(tb)
countries <- select(tb, countries)
countries <- select(tb, country)
countires
countries
distinct(country)
distinct(countries)
devtools::install_github("haozhu233/kableExtra")
install.packages("kableExtra")
library(kableExtra)
unlink('C:/Users/kacic/Desktop/R_RAPORTY/analysis of tuberculosis cases/Analysis of tuberculosis cases_cache', recursive = TRUE)
install.packages("rlang")
install.packages("rlang")
tb[is.na(tb)] <- 0
tb[is.na(tb)] <- 0
tb
library(EDAWR)
tb
tb[is.na(tb)] <- 0
head(t)
head(tb)
gruped_sex <- group_by(tb, sex)
gruped_sex <- grouped_by(tb, sex)
gruped_sex <- grouping(tb, sex)
class(tb)
library(dplyr)
group_by(tb, sex)
new_data_frame <- data.frame(tb$country, tb$year, tb$sex, tb$child + tb$adult + tb$elderly)
head(new_data_frame)
distinct(tb)
distinct(countries)
len(distinct(countries))
length(distinct(countries))
length(countries)
distinct(tb$country)
?distinct
distinct(tb, country)
tb
distinct(tb$country)
nrow(distinct(tb, countru))
nrow(distinct(tb, country))
library(dplyr)
tb
new_data_frame
group_by_sex <- sum(group_by(new_data_frame, sex))
group_by_sex <- sum(group_by(new_data_frame, tb.sex))
group_by(new_data_frame, sex)
group_by(new_data_frame, tb.sex)
group_by(new_data_frame, sex) -> test
group_by(new_data_frame, tb.sex) -> test
sum(test)
test
class(test)
colnames(test) <- c("country", "year", "sex", "value")
test
test <- select(test, sex, value)
test
test <- group_by(test, sex)
test
summarise(test)
?summarise
summarise(test, sex)
summarise(test, value)
aggregate(test, FUN=sum)
summarise(test, value=sum(value))
sum_group <- summarise(test, value=sum(value))
sum_group
plot(sum_group)
barplot(test$value, test$sex)
barplot(height=sum_group$value, names=sum_group$sex)
library(ggplot2)
ggplot(sum_group, aes=(x=sex, y=value))
ggplot(sum_group, aes=(x=sex, y=value)) + geom_bar()
ggplot(sum_group, aes=(x=sex, y=value)) + geom_bar(stat="identity")
p <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity")
p
p <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous()
p
p <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous()
p
x <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous()
x
x
x <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous(breaks = seq(10000, 300000, by=5000))
x
sum_group
x <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous(breaks = seq(1000000, 3000000, by=500000))
x
x <- ggplot(data=sum_group, aes(x=sex, y=value)) + geom_bar(stat="identity") + scale_y_continuous(breaks = seq(10000000, 30000000, by=5000000))
x
colnames(sum_group) <- c("Sex", "Number of Cases")
sum_group
x <- ggplot(data=sum_group, aes(x=Sex, y='Number of Cases')) + geom_bar(stat="identity") + scale_y_continuous(breaks = seq(10000000, 30000000, by=5000000))
x
grouped_sex <- select(tb, sex=sex, number=child+adult+elder)
tb
tb
select(tb, sex, child, adult, elderly) %>% mutate(sex=sex, number=child+adult+elderly)
select(tb, sex, child, adult, elderly) %>% mutate(sex=sex, number=child+adult+elderly) %>% select(sex, number)
grouped_sex <- select(clean_tb, child, adult, elder) %>%
mutate(number=child+adult+elder) %>%
select(sex, number) %>%
group_by(sex) %>%
summarise(number=sum(number))
grouped_sex <- select(tb, child, adult, elder) %>%
mutate(number=child+adult+elder) %>%
select(sex, number) %>%
group_by(sex) %>%
summarise(number=sum(number))
grouped_sex <- select(tb, child, adult, elder) %>%
mutate(number=child+adult+elder) %>%
select(sex, number) %>%
group_by(sex) %>%
summarise(number=sum(number))
grouped_sex <- select(tb, child, adult, elderly) %>%
mutate(number=child+adult+elderly) %>%
select(sex, number) %>%
group_by(sex) %>%
summarise(number=sum(number))
grouped_sex <- select(tb, child, adult, elderly) %>%
mutate(number=child+adult+elderly) %>%
select(sex, number)
grouped_sex <- select(tb, child, adult, elderly) %>%
mutate(number=child+adult+elderly)
grouped_sex
?barplot
grouped_sex <- select(tb, sex, child, adult, elderly) %>%
mutate(sex=sex, number=child+adult+elderly) %>%
select(sex, number) %>%
group_by(sex) %>%
summarise(number=sum(number))
barplot(height=grouped_sex$number, width=grouped_sex$sex)
barplot(height=grouped_sex$number)
grouped_sex
barplot(height=grouped_sex$number, grouped_sex$sex)
child <- select(tb, year, child)
child
summarise(child, child=sum(child))
summarise(group_by(child, year), child=sum(child))
select(tb, year, child, adult, elderly) %>%
group_by(year) %>%
summarise(child = sum(child), adult = sum(adult), elderly = sum(elderly))
select(tb, sex, child, adult, elderly) %>%
group_by(sex) %>%
summarise(number=sum(child+adult+elderly), .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country) %>%
summarise(number = sum(child+adult+elderly), .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country) %>%
summarise(number = sum(child+adult+elderly), year=year .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country) %>%
summarise(number = sum(child+adult+elderly), year=year, .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country, year) %>%
summarise(number = sum(child+adult+elderly), year=year, .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country, year) %>%
summarise(number = sum(child+adult+elderly), .groups = 'drop')
select(tb, country, year, child, adult, elderly) %>%
group_by(country, year) %>%
summarise(number = sum(child+adult+elderly), .groups = 'drop')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "diamonds",
label = "choose a category in Diamonds",
choices = c("Length", "Breath", "Height"," Please Select a Type "),
))
)
sda
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "diamonds",
label = "choose a category in Diamonds",
choices = c("Length", "Breath", "Height"," Please Select a Type "),
))
)
c
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "diamonds",
label = "choose a category in Diamonds",
choices = c("Length", "Breath", "Height"," Please Select a Type "),)))
diamonds
library(ggplot2)
diamonds
hist(diamonds$depth)
p_hist <- ggplot(diamonds, aes=(x=depth)) + geom_histogram(
z
sad
p_hist <- ggplot(diamonds, aes=(x=depth)) + geom_histogram()
p_hist
ggplot(diamonds, aes=(x=depth)) + geom_histogram()
ggplot(diamonds, aes=(x=depth)) + geom_histogram()
ggplot(diamonds, aes=(depth)) + geom_histogram()
ggplot(diamonds, aes=(x=diamonds$depth)) + geom_histogram()
diamonds
ggplot(diamonds, aes(x=diamonds$depth)) + geom_histogram()
ggplot(diamonds, aes(x=depth)) + geom_histogram()
ggplot(diamonds, aes(x=depth)) + geom_histogram() -> p_hist
ggplot(diamonds, aes(x=depth, width=0.2)) + geom_histogram() -> p_hist
p_hist
ggplot(diamonds, aes(x=depth)) + geom_histogram()
ggplot(diamonds, aes(x=depth)) + geom_histogram()
ggplot(diamonds, aes(x=depth, width=0.2)) + geom_histogram()
ggplot(diamonds, aes(x=depth, width=0.2)) + geom_histogram(binwidth = 0.2)
ggplot(diamonds, aes(x=depth, width=0.2)) + geom_histogram(binwidth = 0.2) -> p_hist
p_hist + scale_x_continuous(breaks = seq(55, 77, by = 1))
p_hist + scale_x_continuous(breaks = seq(55, 75, by = 1))
p_hist + xlim(55, 75)
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2, fill=cut) + xlim(55, 75)
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2) + xlim(55, 75)
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2, color=diamonds$cut) + xlim(55, 75)
diamonds
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2, color=diamonds$cut) + xlim(55, 75) + facet_wrap(~cut)
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2) + xlim(55, 75) + facet_wrap(~cut)
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2) + xlim(55, 75) + facet_wrap(~cut) -> p_panels
p_panels
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2) + xlim(55, 75)  -> p_hist
p_hist
ggplot(diamonds, aes(x=depth)) + geom_histogram(binwidth = 0.2, color=cut) + xlim(55, 75)
ggplot(diamonds, aes(x=depth, color=cut)) + geom_histogram(binwidth = 0.2) + xlim(55, 75)
ggplot(diamonds, aes(x=depth, color=cut)) + geom_histogram(binwidth = 0.2) + xlim(55, 75) -> p_cut_colors
ggplot(diamonds, aes(x=depth, fill=cut)) + geom_histogram(binwidth = 0.2) + xlim(55, 75) -> p_cut_colors
p_cut_colors
p_panels
install.packages("readxl")
?read_excel
library(readxl)
?read_excel
library(dplyr)
?filter
?split
?strsplit
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
?facet_wrap
As we see, the dataset has a lot of columns. Below the meaning of each of them:
<ul>
<li> PATIENT_ID - identifier of patient in dataset </li>
<li> RE_DATE </li>
<li> age </li>
<li> gender </li>
<li> Admisison time </li>
<li> Discharge_time </li>
<li> outcome </li>
<li> Hypersensitive cardiac troponin I </li>
<li> hemoglobin </li>
<li> Serum chloride <li>
<li> Serum chloride <li>
<li> Serum chloride <li>
<li> Serum chloride <li>
<li> Serum chloride <li>
<li> Serum chloride <li>
</ul>
library(C50)
library(C5O)
library(mlbench)
install.packages("caret", depdencies = c("Depends", "Suggests"))
library(caret)
library(pROC)
library(C50)
library(mlbench)
data(churn)
library(C50)
library(c50)
library(caret)
library(c50)
data(churn)
library(C50)
library(knitr)
library(C50)
library(partykit)
library(modeldata)
data(datachurn)
library(C50)
library("modeldata")
library(modeltata)
install.packages("modeldata")
library(modeldata)
data("mlc_churn")
mlc_churn
mlc_churn$churn
install.packages("C50")
library(C50)
data(churn)
data("churn")
churn
set.seed(23)
mlc_churn
mlc_churn$churn
inTraining <- createDataPartition(y = mlc_churn$churn, p=.70, list = FALSE)
install.packages("C50", repos="http://R-Forge.R-project.org")
install.packages("C50", repos = "http://R-Forge.R-project.org")
library(C50)
data(churn)
install.packages("C50", repos="https://R-Forge.R-project.org")
install.packages("C50", repos = "https://R-Forge.R-project.org")
uninst("C50")
library(C50)
install.packages("C50", repos="http://R-Forge.R-project.org")
install.packages("C50", repos = "http://R-Forge.R-project.org")
View(inTraining)
View(inTraining)
uninstall.packages("C50")
require(plyr)
uninstall.packages("C50")
training <- mlc_Churn[inTraining]
mlc_churn
training <- mlc_Churn[ inTraining, ]
View(mlc_churn)
intraining
inTraining
mlc_churn
kable(mlc_churn)
library(kable)
View(mlc_churn)
View(inTraining)
training <- mlc_churn[ inTraining,]
testing <- mlc_churn[ -inTraining,]
ctrl <- trainControl( method = "repeatedcv", number = 2, repeats = 5)
library(caret)
ctrl <- trainControl( method = "repeatedcv", number = 2, repeats = 5)
set.seed(23)
fit <- train(churn ~ ., data = training, method = "rf", trControl = ctrl, ntree = 10)
fit <- train(churn ~ ., data = training, method = "rf", trControl = ctrl, ntree = 10)
install.packages("e1071")
fit <- train(churn ~ ., data = training, method = "rf", trControl = ctrl, ntree = 10)
fit
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$churn)
library(dplyr)
?group
?group_by
?sumamrise
?summarise
?summarise
library(gganimate)
?transition_reveal
knitr::opts_chunk$set(echo = TRUE)
dplyr <- library(dplyr)
ggplot2 <- library(ggplot2)
readxl <- library(readxl)
knitr <- library(knitr)
tidyr <- library(tidyr)
lubridate <- library(lubridate)
plotly <- library(plotly)
gtsummary <- library(gtsummary)
gganimate <- library(gganimate)
library(caret)
library(pROC)
cov_cs_df <- read_excel("data\\wuhan_blood_sample_data_Jan_Feb_2020.xlsx")
kable(head(cov_cs_df[1:10], 5))
data_df <- cov_cs_df %>%
mutate(gender = as.factor(ifelse(gender==1, "male", "female"))) %>%
mutate(outcome = as.factor(ifelse(outcome == 0, "survived", "died"))) %>%
rename(admission_time = 'Admission time',
discharge_time = 'Discharge time')
colnames(data_df)[34] <- "Tumor_necrosis_factor_alfa"
colnames(data_df)[37] <- "Interleukin_1_Beta"
colnames(data_df)[68] <- "gamma_glutamyl_transpeptidase"
patients_df <- data_df %>%
select(PATIENT_ID, age, gender, admission_time, discharge_time, outcome) %>%
drop_na(PATIENT_ID) %>%
mutate("hospitalization_length" = seconds_to_period(difftime(discharge_time,
admission_time,
units = "days" ))) %>%
relocate(hospitalization_length, .after = discharge_time)
data_df <- data_df %>%
fill(PATIENT_ID)
kable(head(data_df[1:8], 10))
for(i in 8:ncol(data_df))
{
val <- data_df[i]
val[is.na(val)] <- median(val[!is.na(val)])
data_df[i] <- val
}
kable(head(data_df[1:8], 10))
#tbl_summary(
#  data_df,
#  by = outcome,
#  label = gender ~ "Gender"
#) %>%
#  add_n() %>%
#  modify_header(label = "") %>%
#  add_overall() %>%
#  bold_labels()
gender_bar_plot <- ggplot(patients_df, aes(x = gender, fill = gender)) +
geom_bar() +
theme_bw() +
labs(title = "Number of patients divided into gender",
x = "Gender",
y = "Number of patients",
fill = "Gender")
ggplotly(gender_bar_plot)
gender_age_hist <- ggplot(patients_df, aes(x = age, fill=gender)) +
geom_histogram(binwidth = 5.0) +
theme_bw() +
labs(title = "Histogram of patients age and genders.",
x = "Age",
y = "Number of patients",
fill = "Gender") +
scale_x_continuous(breaks = seq(0, max(patients_df$age), 5))
ggplotly(gender_age_hist)
gender_age_histograms <- ggplot(patients_df, aes(x = age, fill=gender)) +
geom_histogram(binwidth = 5.0) +
theme_bw() +
facet_wrap(~gender) +
labs(title = "Histogram of patients age and genders.",
x = "Age",
y = "Number of patients",
fill = "Gender") +
scale_x_continuous(breaks = seq(0, max(patients_df$age), 5))
ggplotly(gender_age_histograms)
hosp_length_hist <- ggplot(patients_df, aes(x = hospitalization_length, fill = gender)) +
geom_histogram(binwidth = 1.0) +
theme_bw() +
scale_x_continuous(breaks=seq(0, max(patients_df$hospitalization_length), 1)) +
labs(title = "Number of patients and their hospitalization length",
x = "Hospitalization length (in days)",
y = "Number of patients",
fill= "Gender")
ggplotly(hosp_length_hist)
hosp_length_outcome_hist <- ggplot(patients_df, aes(x = hospitalization_length,
fill = outcome)) +
geom_histogram(binwidth = 1.0) +
theme_bw() +
scale_x_continuous(breaks = seq(0, max(patients_df$hospitalization_length), 1)) +
labs(title = "Number of patients, their hospitalization length and outcome (survived or died)",
x = "Hospitalization length (in days)",
y = "Number of patients",
fill = "Outcome")
ggplotly(hosp_length_outcome_hist)
hosp_length_outcomes_hists <- ggplot(patients_df, aes(x = hospitalization_length,
fill = outcome)) +
geom_histogram(binwidth = 1.0) +
theme_bw() +
facet_grid(gender~outcome) +
scale_x_continuous(breaks = seq(0, max(patients_df$hospitalization_length), 5)) +
scale_y_continuous(breaks = seq(0, 20, 4)) +
labs(title = "Number of patients, their hospitalization length and outcome (survived or died)",
x = "Hospitalization length (in days)",
y = "Number of patients",
fill = "Outcome")
ggplotly(hosp_length_outcomes_hists)
patients_death <- patients_df %>%
select(discharge_time, outcome) %>%
filter(outcome == "died") %>%
mutate(discharge_time = as.integer(difftime(discharge_time,
min(patients_df$discharge_time),
units="days"))) %>%
group_by(discharge_time) %>%
summarise(num_of_deaths = n(), .groups="drop")
animated_deaths_plot <- ggplot(patients_death, aes(x = discharge_time,
y = num_of_deaths)) +
geom_line(color = "blue",
size=1.5) +
theme_bw() +
labs(title = "Number of patients death in next days (from addition day)",
x = "Days after addition day",
y = "Number of deaths") +
scale_x_continuous(breaks = seq(0, max(patients_death$discharge_time), 2)) +
scale_y_continuous(breaks = seq(0, max(patients_death$num_of_deaths), 1)) +
transition_reveal(discharge_time)
anim_save("deaths.gif", animated_deaths_plot)
patients_death <- patients_death %>%
arrange(discharge_time) %>%
mutate(num_of_deaths_agg = cumsum(num_of_deaths))
animated_deaths_agg_plot <- ggplot(patients_death,
aes(x = discharge_time,
y = num_of_deaths_agg)) +
geom_line(color = "blue",
size = 1.5) +
theme_bw() +
labs(title = "Number of aggregate patients death in next days (from addition day)",
x = "Days after addition day",
y = "Number of deaths (aggregate)") +
scale_x_continuous(breaks = seq(0, max(patients_death$discharge_time), 2)) +
scale_y_continuous(breaks = seq(0, max(patients_death$num_of_deaths_agg), 10)) +
transition_reveal(discharge_time)
anim_save("deaths_agg.gif", animated_deaths_agg_plot)
ml_df <- data_df %>%
select(-c("PATIENT_ID", "RE_DATE")) %>%
mutate(hosp_len = seconds_to_period(difftime(discharge_time,
admission_time,
units = "days" ))) %>%
relocate(hosp_len, .after = gender) %>%
select(-c("admission_time", "discharge_time"))
inTraining <- createDataPartition(y = ml_df$outcome, p=.70, list=FALSE)
training <- ml_df[inTraining,]
testing <- ml_df[-inTraining,]
ctrl <- trainControl(method="repeatedcv",
number = 2,
repeats = 4,
classProbs = TRUE)
set.seed(23)
rf_fit <- train(outcome ~ .,
data = training,
method = "rf",
trControl = ctrl,
ntree=10)
svm_fit <- train(outcome ~ .,
data = training,
method = "ranger")
